name: NES MLIR builder

env:
  MLIR_VERSION: 20.1.5

on:
  push:
    tags:
      - 'v*'

jobs:
  build-x64-linux:
    timeout-minutes: 360
    env:
      VCPKG_DEP_LIST: x64-linux
      VCPKG_FEATURE_FLAGS: -binarycaching
    runs-on: [self-hosted, linux, x64]
    strategy:
      fail-fast: false
      matrix:
        osversion: [ubuntu-22.04, ubuntu-24.04]
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set output vars to the actual tag name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build Docker
        id: builddocker
        working-directory: ${{ github.workspace }}/docker/
        run: docker build  -t nes_mlir_build_${{ matrix.osversion }} -f Dockerfile-${{ matrix.osversion }} .     
      - name: Build MLIR
        id: installdeps
        run: |
          docker run -v ${{ github.workspace }}:/build_dir --rm nes_mlir_build_${{ matrix.osversion }} \
          ./build_dir/build_ubuntu-x64.sh
      - name: Compress artifacts
        id: compressdeps
        run: |
          tar -czf mlir-${{ env.MLIR_VERSION }}-${{ matrix.osversion }}-X64.tar.gz mlir
      - name: Release
        uses: softprops/action-gh-release@v1
        id: createrelease
        with:
          files: |
            mlir-${{ env.MLIR_VERSION }}-${{ matrix.osversion }}-X64.tar.gz
      - name: Clean build artifacts
        id: cleanbuildartifacts
        if: always()
        run: |
          rm -rf llvm-project 
          rm -rf .git
          rm -rf mlir
      - name: Remove docker image
        id: removedockerimage
        if: always()
        run: |
          test -n "$(docker image ls -q nes_mlir_build_${{ matrix.osversion }})" && \
          docker image rm $(docker image ls -q nes_mlir_build_${{ matrix.osversion }}) || \
          true
  build-arm-linux:
    env:
      VCPKG_DEP_LIST: arm64-linux
      VCPKG_FEATURE_FLAGS: -binarycaching
    runs-on: [self-hosted, linux, arm64]
    strategy:
      matrix:
        osversion: [ubuntu-22.04, ubuntu-24.04]
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set output vars to the actual tag name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build Docker
        id: builddocker
        working-directory: ${{ github.workspace }}/docker/
        run: docker build  -t nes_mlir_build_${{ matrix.osversion }} -f Dockerfile-${{ matrix.osversion }} .     
      - name: Build MLIR
        id: installdeps
        run: |
          docker run -v ${{ github.workspace }}:/build_dir --rm nes_mlir_build_${{ matrix.osversion }} \
          ./build_dir/build_ubuntu-arm64.sh
      - name: Compress artifacts
        id: compressdeps
        run: |
          tar -czf mlir-${{ env.MLIR_VERSION }}-${{ matrix.osversion }}-arm64.tar.gz mlir
      - name: Release
        uses: softprops/action-gh-release@v1
        id: createrelease
        with:
          files: |
            mlir-${{ env.MLIR_VERSION }}-${{ matrix.osversion }}-arm64.tar.gz
      - name: Clean build artifacts
        id: cleanbuildartifacts
        if: always()
        run: |
          rm -rf mlir
          rm -rf llvm-project 
          rm -rf .git
      - name: Remove docker image
        id: removedockerimage
        if: always()
        run: |
          test -n "$(docker image ls -q nes_mlir_build_${{ matrix.osversion }})" && \
          docker image rm $(docker image ls -q nes_mlir_build_${{ matrix.osversion }}) || \
          true
  build-arm-osx:
    timeout-minutes: 360
    env:
      VCPKG_DEP_LIST: arm64-osx
      VCPKG_FEATURE_FLAGS: -binarycaching
    runs-on: [macos-15]
    steps:
      - uses: lukka/get-cmake@latest
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set output vars to the actual tag name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build OSX ARM MLIR
        id: buildmlir
        run: |
          ${{ github.workspace }}/build_osx-arm64.sh
        shell: bash
      - name: Compress artifacts
        id: compressdeps
        run: |
          tar -czf mlir-${{ env.MLIR_VERSION }}-osx-arm64.tar.gz mlir
      - name: Release
        uses: softprops/action-gh-release@v1
        id: createrelease
        with:
          files: |
            mlir-${{ env.MLIR_VERSION }}-osx-arm64.tar.gz
      - name: Clean build artifacts
        id: cleanbuildartifacts
        if: always()
        run: |
          rm -rf mlir
  